// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  image         String?
  emailVerified DateTime?

  comments      Comment[]
  activities    Activity[]
  
  tasks         Task[]
  projects      Project[]
  subscription  Subscription?
  aiUsage       AIUsage[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([email])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  priority    Priority @default(MEDIUM)
  status      Status   @default(TODO)
  dueDate     DateTime?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  aiSuggestions Json?  // Stores AI-generated insights
  subtasks      Json?  // Array of subtasks

  comments      Comment[]      // Add this line
  activities    Activity[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([projectId])
  @@index([status])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  color       String   @default("#3B82F6")
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tasks       Task[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([taskId])
  @@index([authorId])
}

model Activity {
  id        String   @id @default(cuid())
  action    String   // e.g., "Status changed to In Progress", "Priority set to High"
  
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  metadata  Json?    // Store additional data like old/new values
  
  createdAt DateTime @default(now())
  
  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  plan            Plan     @default(FREE)
  status          SubscriptionStatus
  
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  stripeCurrentPeriodEnd DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([stripeCustomerId])
}

model AIUsage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  feature   String   // "task_analysis", "daily_recommendations", etc.
  tokens    Int
  cost      Float
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}